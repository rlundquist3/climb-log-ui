---
import type { Climb } from "../types/data";
import * as echarts from "echarts";

type Props = {
  data: Climb[];
};

const { data }: { data: Climb[] } = Astro.props;

const groupByGrade = (data: Climb[]) => {
  const grouped: { [key: string]: Climb[] } = {};
  (data ?? []).forEach((c) => {
    if (c.grade in grouped) {
      grouped[c.grade].push(c);
    } else {
      grouped[c.grade] = [c];
    }
  });
  return grouped;
};

const bouldersByGrade = groupByGrade(
  data.filter(({ type }) => type === "boulder")
);
const routesByGrade = groupByGrade(data.filter(({ type }) => type === "sport"));

const _pieChartData: { name: string; value: number }[] = Object.entries(
  bouldersByGrade
).map(([grade, climbs]) => ({
  name: grade,
  value: climbs.length,
}));

const boulderGrades = Object.keys(bouldersByGrade).sort(
  (a, b) => Number(a.replace("V", "")) - Number(b.replace("V", ""))
);

console.log(
  boulderGrades,
  boulderGrades.map((g) => bouldersByGrade[g].length)
);

const chart = echarts.init(null, null, {
  renderer: "svg",
  ssr: true,
  width: 800,
  height: 400,
});
const option = {
  tooltip: {
    trigger: "item",
  },
  yAxis: {
    type: "category",
    data: boulderGrades,
  },
  xAxis: { type: "value" },
  series: [
    {
      type: "bar",
      data: boulderGrades.map((g) => bouldersByGrade[g].length),
    },
  ],
};
chart.setOption(option);

const chartSvg = chart.renderToSVGString();

// TODO: add calendar heatmap
---

<div id="chart"></div>
<script define:vars={{ chartSvg }}>
const chart = document.getElementById("chart");

chart.innerHTML = chartSvg;
</script>
<style>
  #chart {
    height: 400px;
    width: 100%;
  }
</style>
